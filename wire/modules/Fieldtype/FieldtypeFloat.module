<?php

/**
 * ProcessWire Float Fieldtype
 *
 * Field that stores a floating point number. 
 *
 * For documentation about the fields used in this class, please see:  
 * /wire/core/Fieldtype.php
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2010 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class FieldtypeFloat extends Fieldtype {

	public static function getModuleInfo() {
		return array(
			'title' => 'Float',
			'version' => 100,
			'summary' => 'Field that stores a floating point (decimal) number',
			'permanent' => true, 
			);
	}

	public function ___getCompatibleFieldtypes(Field $field) {
		$fieldtypes = parent::___getCompatibleFieldtypes($field); 
		foreach($fieldtypes as $type) {
			if(	!$type instanceof FieldtypeInteger && 
				!$type instanceof FieldtypeFloat &&
				$type != 'FieldtypeText') {

				$fieldtypes->remove($type); 
			}
		}
		return $fieldtypes; 
	}

	public function getBlankValue(Page $page, Field $field) {
		return ''; 
	}

	public function sanitizeValue(Page $page, Field $field, $value) {
		return strlen("$value") ? round((float) $value, $field->precision) : '';
	}

	public function getInputfield(Page $page, Field $field) {
		$inputfield = $this->modules->get('InputfieldFloat'); 
		$inputfield->class = $this->className();
		$inputfield->precision = $field->precision; 
		return $inputfield; 
	}

	public function getDatabaseSchema(Field $field) {
		$schema = parent::getDatabaseSchema($field); 
		$schema['data'] = 'float NOT NULL';
		return $schema;
	}

	public function ___getConfigInputfields(Field $field) {
		$inputfields = parent::___getConfigInputfields($field);

		$f = $this->modules->get('InputfieldInteger');
		$f->attr('name', 'precision'); 
		$f->label = 'Number of decimal digits to round to';
		$f->attr('value', $field->precision); 
		$f->attr('size', 8); 
		$inputfields->append($f);

		return $inputfields; 
	}

}

