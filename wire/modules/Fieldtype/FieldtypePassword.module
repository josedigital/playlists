<?php

/**
 * ProcessWire Password Fieldtype
 *
 * Fieldtype for holding a hashed and salted password
 *
 * For documentation about the fields used in this class, please see:  
 * /wire/core/Fieldtype.php
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2010 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class FieldtypePassword extends Fieldtype {

	public static function getModuleInfo() {
		return array(
			'title' => 'Password',
			'version' => 100,
			'summary' => 'Field that stores a hashed and salted password',
			'permanent' => true, 
			);
	}

	/**
	 * Initialize the Fieldtype
	 *
	 */
	public function init() {
		return parent::init();
	}

	/**
	 * Return the associated Inputfield
	 *
	 */
	public function getInputfield(Page $page, Field $field) {
		$inputfield = $this->modules->get('InputfieldPassword'); 
		$inputfield->class = $this->className();
		if($page->is(Page::statusUnpublished)) {
			$inputfield->collapsed = Inputfield::collapsedNo; 
		} else {
			$inputfield->collapsed = Inputfield::collapsedYes; 
		}
		return $inputfield; 
	}

	/**
	 * Return all Fieldtypes derived from FieldtypeText, which we will consider compatible
	 *
	 */
	public function ___getCompatibleFieldtypes(Field $field) {
		return null;
	}

	/**
	 * Sanitize value for runtime
	 *
	 */
	public function sanitizeValue(Page $page, Field $field, $value) {

		if($value instanceof FieldtypePasswordItem) {
			$item = $value; 

		} else { 
			$item = $page->__isset($field->name) ? $page->get($field->name) : $this->getBlankValue($page, $field); 
			$item->pass = trim($value); 
		}

		if($item->isChanged()) $page->trackChange($field->name); 

		return $item; 
	}

	/**
	 * Get a blank password item object
	 *
	 */
	public function getBlankValue(Page $page, Field $field) {
		$item = new FieldtypePasswordItem(); 
		$item->setTrackChanges(true);
		return $item; 
	}

	/**
	 * Given a raw value (value as stored in DB), return the value as it would appear in a Page object
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param string|int|array $value
	 * @return string|int|array|object $value
	 *
	 */
	public function ___wakeupValue(Page $page, Field $field, $value) {
		$wakeValue = $this->getBlankValue($page, $field); 
		$wakeValue->salt = $value['salt'];
		$wakeValue->hash = $value['data'];
		$wakeValue->setTrackChanges(true); 
		return $wakeValue; 
	}

	/**
	 * Given an 'awake' value, as set by wakeupValue, convert the value back to a basic type for storage in DB. 
	 *              
	 * @param Page $page
	 * @param Field $field
	 * @param string|int|array|object $value
	 * @return string|int
	 *
	 */
	public function ___sleepValue(Page $page, Field $field, $value) {

		if(!$value instanceof FieldtypePasswordItem) return $value; 

		$sleepValue = array(
			'salt' => $value->salt, 
			'data' => $value->hash, 
			);

		return $sleepValue; 
	}


	/**
	 * Return the database schema in specified format
	 *
	 */
	public function getDatabaseSchema(Field $field) {
		$schema = parent::getDatabaseSchema($field); 
		$schema['data'] = 'char(40) NOT NULL';
		$schema['salt'] = 'char(32) NOT NULL';
		$schema['xtra'] = 'ENGINE=MyISAM DEFAULT CHARSET=ascii';
		return $schema;
	}


	/**
	 * Return the fields required to configure an instance of FieldtypePassword
	 *
	 */
	public function ___getConfigInputfields(Field $field) {
		$inputfields = parent::___getConfigInputfields($field);
		return $inputfields; 
	}

	
}

/**
 * Class to hold combined pass/salt info for the FieldtypePassword class
 *
 */
class FieldtypePasswordItem extends Wire {

	protected $data = array(
		'salt' => '', 
		'hash' => '',
		);

	public function __set($key, $value) {

		if($key == 'pass' && $value) {

			// first check to see if it actually changed
			if($this->data['salt'] && $this->data['hash']) {
				$hash = $this->hash($value); 
				if($hash === $this->data['hash']) return; // no change
			}

			$this->trackChange('pass');
			$this->data['salt'] = ''; // force it to reset
			$this->data['hash'] = $this->hash($value); 

		} else if(isset($this->data[$key])) {
			$this->data[$key] = $value; 
		}
	}

	public function __get($key) {
		if($key == 'salt' && !$this->data['salt']) {
			$this->data['salt'] = $this->salt();
		}

		return isset($this->data[$key]) ? $this->data[$key] : null;
	}

	public function matches($pass) {
		return strlen($pass) && $this->hash($pass) === $this->data['hash'];
	}

	protected function salt() {
		return md5(mt_rand() . microtime()); 
	}

	/**
	 * Given an unhashed password, generate a hash of the password for database storage and comparison
	 *
	 * @param string $pass
	 *
	 */
	protected function hash($pass) {
		$hashType = wire('config')->userAuthHashType; 
		if(!$hashType) return md5($pass); 
		if(!$this->data['salt']) $this->data['salt'] = $this->salt();
		$salt1 = $this->data['salt'];
		$salt2 = (string) wire('config')->userAuthSalt; 
		$splitPass = str_split($pass, (strlen($pass) / 2) + 1); 
		$hash = hash($hashType, $salt1 . $splitPass[0] . $salt2 . $splitPass[1], false); 
		return $hash; 
	}

	public function __toString() {
		return (string) $this->data['hash']; 
	}
	
}



