<?php

/**
 * An Inputfield for handling a password
 *
 */
class InputfieldPassword extends InputfieldText {

	public static function getModuleInfo() {
		return array(
			'title' => 'Password',
			'version' => 100,
			'summary' => "Password input with confirmation field that doesn't ever echo the input back.",
			'permanent' => true, 
			);
	}

	public function __construct() {
		parent::__construct();
		$this->attr('type', 'password'); 
		$this->attr('size', 50); 
		$this->attr('maxlength', 128); 
		$this->set('minlength', 6); 
	}

	public function ___render() {
		if(!$this->description) {
			$this->set('description', "Password must be at least {$this->minlength} characters and have at least 1 letter and 1 digit. Password may not have whitespace."); 
		}
		$value = $this->attr('value'); 
		$trackChanges = $this->trackChanges();
		if($trackChanges) $this->setTrackChanges(false);
		$this->attr('value', '');	
		$out = 	"\n<p><input " . $this->getAttributesString() . " /></p>" . 
			"\n<p><input type='password' size='{$this->size}' name='_{$this->name}' value='' /> (confirm)</p>";
		$this->attr('value', $value);
		if($trackChanges) $this->setTrackChanges(true);
		return $out; 
	}

	public function ___processInput(WireInputData $input) {

		parent::___processInput($input); 

		$key = $this->attr('name'); 
		$value = $this->attr('value'); 

		if(isset($input->$key)) {
			// form was submitted

			if($input->$key) { 
				// password was submitted
				
				$confirmKey = "_" . $key;

				if(preg_replace('/[\s]+/', '', $value) != $value) $this->error("Password contained whitespace. "); 
				if($input->$confirmKey != $input->$key) $this->error("Passwords do not match. "); 
				if(strlen($value) < $this->minlength) $this->error("Password is less than {$this->minlength} characters."); 
				if(!preg_match('/[a-zA-Z]/', $value)) $this->error("Password does not contain at least one letter (a-z A-Z)."); 
				if(!preg_match('/[0-9]/', $value)) $this->error("Password does not contain at least one digit (0-9)."); 

			} else if($this->required) {
				$this->error("Required password was not specified. "); 
			}

			if(count($this->getErrors())) {
				$this->attr('value', ''); 
				$this->resetTrackChanges(); // don't record a change
			}
			
		}

		return $this;
	}

	/**
	 * Return the fields required to configure an instance of InputfieldPassword
	 *
	 */
	public function ___getConfigInputfields() {
		$inputfields = parent::___getConfigInputfields();
		$f = $inputfields->get('collapsed');
		$inputfields->remove($f); 
		return $inputfields; 
	}
}
