<?php

/**
 * ProcessWire Page Type Process
 *
 * Manage, edit add pages of a specific type in ProcessWire
 * 
 * For more details about how Process modules work, please see: 
 * /wire/core/Process.php 
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2010 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessPageType extends Process implements ConfigurableModule {

	static public function getModuleInfo() {
		return array(
			'title' => 'Page Type',
			'version' => 100, 
			'summary' => 'List, Edit and Add pages of a specific type', 
			'permanent' => true, 
			); 
	}

	protected $pages;
	protected $template = null;

	public function __construct() {
		$this->set('showFields', array('name')); 
	}

	public function init() {

		$this->config->scripts->add($this->config->urls->ProcessPageType . 'ProcessPageType.js'); 
		$this->config->styles->add($this->config->urls->ProcessPageType . 'ProcessPageType.css'); 

		$this->fuel->breadcrumbs->add(new Breadcrumb('../', $this->page->get('title|name'))); 
		$this->pages = $this->fuel($this->page->name); 
		if(is_null($this->pages)) $this->pages = $this->fuel('pages'); 
		if($this->pages instanceof PagesType) $this->template = $this->pages->getTemplate(); 

		parent::init();
	}

	public function ___execute() {
		return $this->executeList();
	}

	public function ___executeList() {
		return $this->renderList();
	}

	public function ___executeEdit() {

		$editor = $this->modules->get("ProcessPageEdit"); 
		return $editor->execute();
	}

	public function ___executeAdd() {
		$editor = $this->modules->get("ProcessPageAdd"); 
		$editor->template = $this->template; 
		$editor->parent_id = $this->page->id;
		return $editor->execute();
	}

	protected function renderList() {

		$out = '';

		if(!$this->pages->getTemplate()) {
			$form = $this->getTemplateFilterForm();		
			$out = $form->render();
		}

		$table = $this->modules->get("MarkupAdminDataTable"); 
		$table->setEncodeEntities(false); 
		$fieldNames = $this->showFields; 
		$table->headerRow($fieldNames); 
		$selector = "limit=25, status<" . Page::statusMax; 
		$pages = $this->pages->find($selector); 

		foreach($pages as $page) {
			if(!$page->editable()) continue; 
			$n = 0; 
			$row = array();
			foreach($fieldNames as $name) {
				if(!$n) $row[$page->get($name)] = "edit/?id={$page->id}";
					else $row[] = $this->renderListFieldValue($page->get($name)); 
				$n++;
			}
			$table->row($row); 
		}

		if($this->page->addable()) $table->action(array('Add New' => 'add/')); 

		if($pages->getTotal() > count($pages)) {
			$pager = $this->modules->get("MarkupPagerNav"); 
			$out .= $pager->render($pages);
		}

		$out .= $table->render();

		return $out; 
	}

	protected function renderListFieldValue($value) {
		if(is_string($value) || is_int($value)) return htmlspecialchars($value); 
		if(is_array($value)) return htmlspecialchars(print_r($value, true)); 
		if(is_object($value)) {

			if($value instanceof WireArray) {
				$out = '';	
				foreach($value as $k => $v) {
					$out .= $v->name . ", ";
				}
				return nl2br(rtrim($out, ", ")); 

			} else if($value instanceof Wire) {
				return $value->name; 
			}
		}
		
		return '';
	}

	protected function getTemplateFilterForm() {

		$form = $this->modules->get("InputfieldForm"); 
		$form->attr('id', 'template_filter_form'); 
		$form->attr('method', 'get'); 
		$form->attr('action', './list'); 

		$field = $this->modules->get("InputfieldSelect"); 
		$field->attr('id+name', 'templates_id'); 
		$field->label = 'Filter by Template'; 
		$field->addOption('', 'Show All'); 
		$field->collapsed = Inputfield::collapsedBlank;

		foreach($this->templates as $template) {
			$field->addOption($template->id, $template->name); 
		}

		$filterName = $this->className . 'TemplatesID';
		if(isset($this->input->get->templates_id)) {
			$this->session->set($filterName, (int) $this->input->get->templates_id); 
		}

		$filterValue = (int) $this->session->$filterName; 
		if($filterValue) $this->template = $this->templates->get($filterValue); 

		$field->attr('value', $filterValue); 
		$form->append($field); 

		return $form;
	}

	static public function getModuleConfigInputfields(array $data) {

		$showFields = isset($data['showFields']) ? $data['showFields'] : array();
		$fields = array('name'); 
		foreach(wire('fields') as $field) $fields[] = $field->name; 
	
		$inputfields = new InputfieldWrapper();
		$f = wire('modules')->get('InputfieldAsmSelect'); 
		$f->label = "What fields should be displayed in the page listing?";
		$f->attr('id+name', 'showFields'); 
		foreach($fields as $name) $f->addOption($name); 
		$f->attr('value', $showFields); 
		$inputfields->add($f);

		return $inputfields;
	}
	
}

